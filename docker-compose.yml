networks:
  rezerve:
    driver: bridge

services:
  rezerve-auth-service-db:
    image: postgres:15
    container_name: rezerve_auth_service_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${AUTH_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8000:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    networks:
      - rezerve

  rezerve-auth-service:
    build:
      context: ./rezerve-auth-service
      dockerfile: Dockerfile
    container_name: rezerve_auth_service
    restart: unless-stopped
    depends_on:
      - rezerve-auth-service-db
      - rezerve-kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://rezerve-auth-service-db:5432/${AUTH_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      JWT_SECRET: ${JWT_SECRET}
      SPRING_SQL_INIT_MODE: always
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP}
    networks:
      - rezerve

  rezerve-event-service-db:
    image: postgres:15
    container_name: rezerve_event_service_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${EVENT_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8001:5432"
    volumes:
      - event_postgres_data:/var/lib/postgresql/data
    networks:
      - rezerve

  rezerve-event-service-redis:
    image: redis:7
    container_name: rezerve_event_service_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - event-service-redis-data:/data
    networks:
      - rezerve

  rezerve-event-service:
    build:
      context: ./rezerve-event-service
      dockerfile: Dockerfile
    container_name: rezerve_event_service
    restart: unless-stopped
    depends_on:
      - rezerve-event-service-db
      - rezerve-kafka
      - rezerve-event-service-redis
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://rezerve-event-service-db:5432/${EVENT_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      AUTH_SERVICE_ADDRESS: ${AUTH_SERVICE_ADDRESS}
      AUTH_SERVICE_GRPC_PORT: ${AUTH_SERVICE_GRPC_PORT}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP}
      EVENT_SERVICE_REDIS_HOST: rezerve-event-service-redis
      EVENT_SERVICE_REDIS_PORT: 6379
    networks:
      - rezerve

  rezerve-kafka:
    image: bitnami/kafka:4.0
    container_name: rezerve_kafka
    restart: unless-stopped
    environment:
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://rezerve-kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@rezerve-kafka:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: broker,controller
    ports:
      - "9092:9092"
      - "9094:9094"
    networks:
      - rezerve

  rezerve-inventory-service-db:
    image: postgres:15
    container_name: rezerve_inventory_service_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${INVENTORY_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8003:5432"
    volumes:
      - inventory_postgres_data:/var/lib/postgresql/data
    networks:
      - rezerve

  rezerve-inventory-service-redis:
    image: redis:7
    container_name: rezerve_inventory_service_redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - inventory-service-redis-data:/data
    networks:
      - rezerve

  rezerve-inventory-service:
    build:
      context: ./rezerve-inventory-service
      dockerfile: Dockerfile
    container_name: rezerve_inventory_service
    restart: unless-stopped
    depends_on:
      - rezerve-inventory-service-db
      - rezerve-kafka
      - rezerve-inventory-service-redis
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://rezerve-inventory-service-db:5432/${INVENTORY_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP}
      INVENTORY_SERVICE_REDIS_HOST: rezerve-inventory-service-redis
      INVENTORY_SERVICE_REDIS_PORT: 6379
    networks:
      - rezerve

  rezerve-booking-service-db:
    image: postgres:15
    container_name: rezerve_booking_service_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${BOOKING_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8002:5432"
    volumes:
      - booking_postgres_data:/var/lib/postgresql/data
    networks:
      - rezerve

  rezerve-booking-service-redis:
    image: redis:7
    container_name: rezerve_booking_service_redis
    restart: unless-stopped
    command: redis-server --notify-keyspace-events Ex
    ports:
      - "6381:6379"
    volumes:
      - booking-service-redis-data:/data
    networks:
      - rezerve

  rezerve-booking-service:
    build:
      context: ./rezerve-booking-service
      dockerfile: Dockerfile
    container_name: rezerve_booking_service
    restart: unless-stopped
    depends_on:
      - rezerve-booking-service-db
      - rezerve-kafka
      - rezerve-booking-service-redis
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://rezerve-booking-service-db:5432/${BOOKING_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      AUTH_SERVICE_ADDRESS: ${AUTH_SERVICE_ADDRESS}
      AUTH_SERVICE_GRPC_PORT: ${AUTH_SERVICE_GRPC_PORT}
      EVENT_SERVICE_ADDRESS: ${EVENT_SERVICE_ADDRESS}
      EVENT_SERVICE_GRPC_PORT: ${EVENT_SERVICE_GRPC_PORT}
      INVENTORY_SERVICE_ADDRESS: ${INVENTORY_SERVICE_ADDRESS}
      INVENTORY_SERVICE_GRPC_PORT: ${INVENTORY_SERVICE_GRPC_PORT}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP}
      BOOKING_SERVICE_REDIS_HOST: rezerve-booking-service-redis
      BOOKING_SERVICE_REDIS_PORT: 6379
    networks:
      - rezerve

  rezerve-payment-service-db:
    image: postgres:15
    container_name: rezerve_payment_service_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${PAYMENT_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8004:5432"
    volumes:
      - payment_postgres_data:/var/lib/postgresql/data
    networks:
      - rezerve

  rezerve-payment-service:
    build:
      context: ./rezerve-payment-service
      dockerfile: Dockerfile
    container_name: rezerve_payment_service
    restart: unless-stopped
    depends_on:
      - rezerve-payment-service-db
      - rezerve-kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://rezerve-payment-service-db:5432/${PAYMENT_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      AUTH_SERVICE_ADDRESS: ${AUTH_SERVICE_ADDRESS}
      AUTH_SERVICE_GRPC_PORT: ${AUTH_SERVICE_GRPC_PORT}
      BOOKING_SERVICE_ADDRESS: ${BOOKING_SERVICE_ADDRESS}
      BOOKING_SERVICE_GRPC_PORT: ${BOOKING_SERVICE_GRPC_PORT}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP}
    networks:
      - rezerve

  rezerve-pricing-service-db:
    image: postgres:15
    container_name: rezerve_pricing_service_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${PRICING_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8005:5432"
    volumes:
      - pricing_postgres_data:/var/lib/postgresql/data
    networks:
      - rezerve

  rezerve-pricing-service:
    build:
      context: ./rezerve-pricing-service
      dockerfile: Dockerfile
    container_name: rezerve_pricing_service
    restart: unless-stopped
    depends_on:
      - rezerve-pricing-service-db
      - rezerve-kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://rezerve-pricing-service-db:5432/${PRICING_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP}
    networks:
      - rezerve

  rezerve-maildev-service:
    image: maildev/maildev:latest
    container_name: rezerve_maildev_service
    restart: unless-stopped
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - rezerve

  rezerve-notification-service-db:
    image: mongo:latest
    container_name: rezerve_notification_service_db
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DB}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "8006:27017"
    volumes:
      - notification_mongodb_data:/data/db
    networks:
      - rezerve

  rezerve-notification-service:
    build:
      context: ./rezerve-notification-service
      dockerfile: Dockerfile
    container_name: rezerve_notification_service
    restart: unless-stopped
    depends_on:
      - rezerve-notification-service-db
      - rezerve-kafka
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@rezerve-notification-service-db:27017/${MONGO_DB}?authSource=admin
      SPRING_MAIL_HOST: rezerve-maildev-service
      SPRING_MAIL_PORT: 1025
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP}
    networks:
      - rezerve

  rezerve-api-gateway:
    build:
      context: ./rezerve-api-gateway
      dockerfile: Dockerfile
    container_name: rezerve_api_gateway
    restart: unless-stopped
    environment:
      REZERVE_AUTH_SERVICE_URL: http://rezerve-auth-service:6000/auth
    ports:
      - "7000:7000"
    networks:
      - rezerve

  rezerve-prometheus:
    image: prom/prometheus:latest
    container_name: rezerve_prometheus
    restart: unless-stopped
    volumes:
      - ./rezerve-prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - rezerve-api-gateway
      - rezerve-pricing-service
      - rezerve-booking-service
      - rezerve-inventory-service
      - rezerve-event-service
      - rezerve-payment-service
      - rezerve-auth-service
      - rezerve-notification-service
    ports:
      - "9090:9090"
    networks:
      - rezerve

  rezerve-grafana:
    image: grafana/grafana:latest
    container_name: rezerve_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    ports:
      - "3000:3000"
    depends_on:
      - rezerve-prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - rezerve

volumes:
  auth_postgres_data:
  event_postgres_data:
  inventory_postgres_data:
  booking_postgres_data:
  payment_postgres_data:
  event-service-redis-data:
  inventory-service-redis-data:
  booking-service-redis-data:
  pricing_postgres_data:
  notification_mongodb_data:
  grafana_data:
